package com.codeprep.stream.api;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamMain {
	
	public static void main(String[] args) {
	
		// --> We can create List by 3 ways - 
		
		//1. 
//		List<Integer> list1 = List.of(22,12,33,22);  //This [List.Of] method is available 
													//in [java 9] not in [java 8]
//		System.out.println(list1);
		
		//2. 
		List<Integer> list2 = new ArrayList<>();
		list2.add(11);
		list2.add(12);
		list2.add(13);
		list2.add(14);
//		System.out.println(list2);
		
		//There are following ways to print list in [java streams] -->
		
		//1.
//		Stream<Integer> list2Stream = list2.stream();
//		list2Stream.forEach(e -> 
//		System.out.println(e)
//				);
		
		//2.
//		list2.stream().forEach(e -> System.out.println(e));

		
		// --> This is old way to filter list -
		
//		List<Integer> evenList = new ArrayList<>();
//		List<Integer> oddList = new ArrayList<>();
//		for(int i:list2) {
//			if(i % 2 == 0) {
//				evenList.add(i);
//			}else {
//				oddList.add(i);
//			}
//		}
//		System.out.println("Even list --> "+evenList);
//		System.out.println("Odd list --> "+oddList);
		
		// --> This is new way to filter list -
		
//		List<Integer> evenList = list2.stream().filter(e -> e % 2 == 0).collect(Collectors.toList());
//		System.out.println("Even list --> "+evenList);
//		
//		List<Integer> oddList = list2.stream().filter(e -> e % 2 != 0).collect(Collectors.toList());
//		System.out.println("Odd List --> "+oddList);
//		
//		List<Integer> squareList = list2.stream().map(e -> e*e).collect(Collectors.toList());
//		System.out.println(list2+" Square of each element is --> "+squareList);
//		
//		List<Integer> greaterTen = list2.stream().filter(e -> e>12).collect(Collectors.toList());
//		System.out.println("Greater then 10 is --> "+greaterTen);
		
		//3. 
//		List<Integer> list3 = Arrays.asList(23,12,56,28,96,62);
//		System.out.println(list3);
		
		// --> We can also perform stream operations on array By following way -->
		
//		String[] names = {"Sohel", "Aman", "Karan", "Amol", "Raj"};
		
		
	

		String[] names = {"Sohel", "Aman", "Karan", "Amol", "Raj"};
		
		//Filtering:
		Stream<String> filteredNames = Arrays.stream(names)
		        .filter(e -> e.startsWith("A"));
		filteredNames.forEach(System.out::println);

		//Mapping: 
//		Stream<String> uppercaseNames = Arrays.stream(names)
//		        .map(String::toUpperCase);
//		uppercaseNames.forEach(System.out::println);
		
		//Sorting:
//		Stream<String> sortedNames = Arrays.stream(names)
//		        .sorted();
//		sortedNames.forEach(System.out::println);
		
		//Collecting Results: 
//		List<String> nameList = Arrays.stream(names)
//		        .collect(Collectors.toList());
//		System.out.println(nameList);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
